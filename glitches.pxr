@ /glitches root:video {
  #%autostart true
  #%praxis.version 4.2.0
  .renderer OpenGL
  .width 800
  .height 600
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 752
    #%graph.y 457
    .always-on-top true
    .show-cursor true
  }
  @ ./player-1 video:player {
    #%graph.x 109
    #%graph.y 106
    .video file:/C:/Users/Chris%20Langford/Documents/ShareX/Screenshots/2019-05/2019-05-08_10-23-44.mp4
    .position 0.7834561898092643
    .resize-mode Scale
  }
  @ ./glitchScanline video:custom {
    #%graph.x 430
    #%graph.y 106
    .code "

    @In(1) PImage in;
    
    @P(1) @Type.Integer(min = 1, max = 1000, def = 1) int thickness;
    @P(2) @Type.Integer(min = 0, max = 1000, def = 0) int randomness;
    
    @OffScreen PGraphics gfx;
   
    @Override
    public void setup() \{

    \}
    
    @Override
    public void draw() \{
        gfx.copy(in);
        copy(gfx);
        for(int i = 0; i < height/thickness; i++)
        \{
            drawLine(gfx, i*thickness, thickness, (int)random(-randomness, randomness));
        \}
        release(in);
    \}
    
    private void drawLine(PGraphics g, int l, int t, int o)
    \{
        image(g, o, l, width, t, 0, l);
        noStroke();
        fill(0);
        rect(0, l, o, t);
        rect(width, l, o, t);
    \}
    
"
    .randomness 30
  }
  @ ./blur video:gl:p2d {
    #%graph.x 466
    #%graph.y 337
    .code "

    @In(1) PImage in;
    @OffScreen(persistent = false) PGraphics2D scratch;
    
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;
    
    @P(1) @Type.Number(min=1, max=40, def=1) double size;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader.set(\"blurSize\", (int)(size + 0.5));
        shader.set(\"sigma\", size/2);
        scratch.beginDraw();
        scratch.shader(shader);
        shader.set(\"horizontalPass\", 1);
        scratch.image(in, 0, 0);
        scratch.endDraw();
        shader(shader);
        shader.set(\"horizontalPass\", 0);
        image(scratch, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
    .fragment "// Adapted from Processing SepBlur example, adapted from
// http://callumhay.blogspot.com/2010/09/gaussian-blur-shader-glsl.html
uniform sampler2D texture;
 
uniform vec2 texOffset;
 
varying vec4 vertColor;
varying vec4 vertTexCoord;
 
uniform int blurSize;       
uniform int horizontalPass; // 0 or 1 to indicate vertical or horizontal pass
uniform float sigma;        // The sigma value for the gaussian function: higher value means more blur
                            // A good value for 9x9 is around 3 to 5
                            // A good value for 7x7 is around 2.5 to 4
                            // A good value for 5x5 is around 2 to 3.5
 
const float pi = 3.14159265;
 
void main() \{  
  const float numBlurPixelsPerSide = float(blurSize / 2); 
 
  vec2 blurMultiplyVec = 0 < horizontalPass ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
 
  // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)
  vec3 incrementalGaussian;
  incrementalGaussian.x = 1.0 / (sqrt(2.0 * pi) * sigma);
  incrementalGaussian.y = exp(-0.5 / (sigma * sigma));
  incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;
 
  vec4 avgValue = vec4(0.0, 0.0, 0.0, 0.0);
  float coefficientSum = 0.0;
 
  // Take the central sample first...
  avgValue += texture2D(texture, vertTexCoord.st) * incrementalGaussian.x;
  coefficientSum += incrementalGaussian.x;
  incrementalGaussian.xy *= incrementalGaussian.yz;
 
  // Go through the remaining 8 vertical samples (4 on each side of the center)
  for (float i = 1.0; i <= numBlurPixelsPerSide; i++) \{ 
    avgValue += texture2D(texture, vertTexCoord.st - i * texOffset * 
                          blurMultiplyVec) * incrementalGaussian.x;         
    avgValue += texture2D(texture, vertTexCoord.st + i * texOffset * 
                          blurMultiplyVec) * incrementalGaussian.x;         
    coefficientSum += 2.0 * incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;
  \}
 
  gl_FragColor = avgValue / coefficientSum;
\}"
    .size 3
  }
  @ ./feedback video:custom {
    #%graph.x 658
    #%graph.y 229
    .code "

    @In(1) PImage in;
    
    @P(1) float frameW;
    @P(2) float frameH;
    @P(3) float offsetX;
    @P(4) float offsetY;
    @P(5) float opacity;
    
    @OffScreen PGraphics lastFrame, currentFrame;
    
    @Override
    public void setup() \{

    \}
    
    @Override
    public void draw() \{
        currentFrame.copy(in);
        currentFrame.blendMode(SCREEN, opacity);
        if(lastFrame != null)
            currentFrame.image(
                    lastFrame, 
                    (width - frameW)/2 + offsetX, 
                    (height - frameH)/2 + offsetY, 
                    frameW, 
                    frameH);
        lastFrame.copy(currentFrame);
        copy(currentFrame);
        release(in);
    \}
    
"
    .frame-w 600
    .frame-h 800
    .offset-x 100
    .opacity .3
  }
  ~ ./player-1!out ./glitchScanline!in
  ~ ./glitchScanline!out ./blur!in
  ~ ./blur!out ./feedback!in
  ~ ./feedback!out ./screen!in
}
