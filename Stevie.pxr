@ /Stevie root:video {
  #%autostart true
  #%praxis.version 4.2.0
  .renderer OpenGL
  .width 800
  .height 600
  .fps 60.0
  @ ./screen video:output {
    #%graph.x 1522
    #%graph.y 267
    .device 2
    .always-on-top true
    .undecorated true
    .show-cursor true
  }
  @ ./BG01 core:container {
    #%graph.x 277
    #%graph.y 79
    #%praxis.version 4.2.0
    @ ./background video:gl:p2d {
      #%graph.x 487
      #%graph.y 138
      .code "

    @P(1) PImage background;
    @P(2) float scrollX;
    @P(3) float scrollY;
    @P(4) float scaleX;
    @P(5) float scaleY;
    
    @Override
    public void setup() \{
        find(processing.core.PGraphics.class).ifPresent(pg-> \{
            pg.hint(pg.DISABLE_TEXTURE_MIPMAPS);
            //((PGraphicsOpenGL) pg).textureSampling(2);
        \});
    \}

    @Override
    public void draw() \{
       
        beginShape();
        textureWrap(REPEAT);

        if(background != null)
            texture(background);
        vertex(0, 0, 
                (scrollX * background.width) * scaleX, (scrollY * background.height) * scaleY);
               
        vertex(width, 0, 
                (width + scrollX * background.width) * scaleX, (scrollY * background.height) * scaleY);
        
        vertex(width, height, 
                (width  + scrollX * background.width) * scaleX, (height + scrollY * background.height) * scaleY);
        
        vertex(0, height, 
                (scrollX * background.width) * scaleX, (height + scrollY * background.height) * scaleY);
        
        
        endShape();
    \}
"
      .background [file "resources/Sprites/doodles/doodle04.png"]
      .scroll-x -0.20000505447387695
      .scroll-y -0.0
      .scale-x 1.5573774576187134
      .scale-y 1.9479787349700928
    }
    @ ./backX core:custom {
      #%graph.x 187
      #%graph.y 352
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate -.6
      .osc-type Triangle
    }
    @ ./backY core:custom {
      #%graph.x 187
      #%graph.y 472
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate -.25
      .osc-type Triangle
    }
    @ ./hsv video:gl:p2d {
      #%graph.x 850
      #%graph.y 418
      .code "

    @P(1) @Type.Number(min=0, max=360, def=0) double hue;
    @P(2) @Type.Number(min=0, max=2, def=1) double saturation;
    @P(3) @Type.Number(min=0, max=2, def=1) double value;
    
    void updateUniforms() \{
         shader.set(\"hue\", hue);
         shader.set(\"saturation\", saturation);
         shader.set(\"value\", value);
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
      .fragment "// https://gamedev.stackexchange.com/a/59808
uniform sampler2D texture;

uniform vec2 texOffset;

uniform float hue;
uniform float saturation;
uniform float value;

varying vec4 vertColor;
varying vec4 vertTexCoord;

vec3 rgb2hsv(vec3 c) \{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
\}

vec3 hsv2rgb(vec3 c) \{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
\}

void main() \{
    vec4 textureColor = texture2D(texture, vertTexCoord.st) * vertColor;
    vec3 fragRGB = textureColor.rgb;
    vec3 fragHSV = rgb2hsv(fragRGB).xyz;
    fragHSV.x += hue / 360.0;
    fragHSV.y *= saturation;
    fragHSV.z *= value;
    fragRGB = hsv2rgb(fragHSV);
    gl_FragColor = vec4(fragRGB, textureColor.a);
\}"
      .hue 216.00005686283112
      .value 2.0
    }
    @ ./hue core:custom {
      #%graph.x 466
      #%graph.y 610
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate .05
      .osc-type Triangle
    }
    @ ./multiply-1 core:math:multiply {
      #%graph.x 629
      #%graph.y 597
      .value 360
    }
    @ ./xform video:custom {
      #%graph.x 673
      #%graph.y 325
      .code "

    @In(1)
    PImage in;
    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_y;
    @P(3)
    @Type.Number(min = -180, max = 180, def = 0)
    double rotate;
    @P(4)
    @Type.Number(min = 0, max = 2, def = 1)
    double scale;

    @Override
    public void draw() \{
        double w2 = width / 2;
        double h2 = height / 2;
        translate(
                map(translate_x, 0, 1, -w2, width + w2),
                map(translate_y, 0, 1, -h2, height + h2)
        );
        rotate(radians(rotate));
        scale(scale);
        image(in, -w2, -h2);
    \}
"
      .rotate 170.63618030052027
      .scale 2
    }
    @ ./out-1 video:container:out {
      #%graph.x 1039
      #%graph.y 460
    }
    @ ./sprite core:container:in {
      #%graph.x -41
      #%graph.y 310
    }
    @ ./scaleX core:custom {
      #%graph.x 70
      #%graph.y 28
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate 2
    }
    @ ./custom-1 core:custom {
      #%graph.x 242
      #%graph.y 28
      .code "

    @P(1) float val;
    @Out(1) Output out;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        out.send(val + 1);
    \}
    
"
      .val 0.5573774576187134
    }
    @ ./scaleX1 core:custom {
      #%graph.x 25
      #%graph.y 153
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate 2
      .time-offset 5
      .osc-type Cosine
    }
    @ ./custom-2 core:custom {
      #%graph.x 212
      #%graph.y 153
      .code "

    @P(1) float val;
    @Out(1) Output out;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        out.send(val + 1);
    \}
    
"
      .val 0.9479787945747375
    }
    @ ./rot1 core:custom {
      #%graph.x 367
      #%graph.y 445
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate 2
      .time-offset 5
      .osc-type Cosine
    }
    @ ./multiply-2 core:math:multiply {
      #%graph.x 494
      #%graph.y 364
      .value 180
    }
    ~ ./backX!val ./background!scroll-x
    ~ ./backY!val ./background!scroll-y
    ~ ./hue!val ./multiply-1!in
    ~ ./multiply-1!out ./hsv!hue
    ~ ./background!out ./xform!in
    ~ ./xform!out ./hsv!in
    ~ ./hsv!out ./out-1!in
    ~ ./sprite!out ./background!background
    ~ ./scaleX!val ./custom-1!val
    ~ ./custom-1!out ./background!scale-x
    ~ ./scaleX1!val ./custom-2!val
    ~ ./custom-2!out ./background!scale-y
    ~ ./rot1!val ./multiply-2!in
    ~ ./multiply-2!out ./xform!rotate
  }
  @ ./composite-1 video:composite {
    #%graph.x 605
    #%graph.y 108
    .mode BitXor
    .force-alpha true
  }
  @ ./BG02 core:container {
    #%graph.x 302
    #%graph.y 223
    #%praxis.version 4.2.0
    @ ./background video:gl:p2d {
      #%graph.x 425
      #%graph.y 337
      .code "

    @P(1) PImage background;
    @P(2) float scrollX;
    @P(3) float scrollY;
    
    @Override
    public void setup() \{
        find(processing.core.PGraphics.class).ifPresent(pg-> \{
            pg.hint(pg.DISABLE_TEXTURE_MIPMAPS);
            //((PGraphicsOpenGL) pg).textureSampling(2);
        \});
    \}

    @Override
    public void draw() \{
       
        beginShape();
        textureWrap(REPEAT);

        if(background != null)
            texture(background);
        vertex(0, 0, scrollX * background.width, scrollY * background.height);
        vertex(width, 0, width + scrollX * background.width, scrollY * background.height);
        vertex(width, height, width  + scrollX * background.width, height + scrollY * background.height);
        vertex(0, height, scrollX * background.width, height + scrollY * background.height);
        endShape();
    \}
"
      .background [file "resources/Sprites/doodles/doodle11.png"]
      .scroll-x 0.6000025272369385
      .scroll-y -0.0
    }
    @ ./backX core:custom {
      #%graph.x 269
      #%graph.y 352
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate .3
      .osc-type Triangle
    }
    @ ./backY core:custom {
      #%graph.x 269
      #%graph.y 472
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate -1
      .osc-type Triangle
    }
    @ ./hsv video:gl:p2d {
      #%graph.x 850
      #%graph.y 418
      .code "

    @P(1) @Type.Number(min=0, max=360, def=0) double hue;
    @P(2) @Type.Number(min=0, max=2, def=1) double saturation;
    @P(3) @Type.Number(min=0, max=2, def=1) double value;
    
    void updateUniforms() \{
         shader.set(\"hue\", hue);
         shader.set(\"saturation\", saturation);
         shader.set(\"value\", value);
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
      .fragment "// https://gamedev.stackexchange.com/a/59808
uniform sampler2D texture;

uniform vec2 texOffset;

uniform float hue;
uniform float saturation;
uniform float value;

varying vec4 vertColor;
varying vec4 vertTexCoord;

vec3 rgb2hsv(vec3 c) \{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
\}

vec3 hsv2rgb(vec3 c) \{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
\}

void main() \{
    vec4 textureColor = texture2D(texture, vertTexCoord.st) * vertColor;
    vec3 fragRGB = textureColor.rgb;
    vec3 fragHSV = rgb2hsv(fragRGB).xyz;
    fragHSV.x += hue / 360.0;
    fragHSV.y *= saturation;
    fragHSV.z *= value;
    fragRGB = hsv2rgb(fragHSV);
    gl_FragColor = vec4(fragRGB, textureColor.a);
\}"
      .hue 72.0001620054245
    }
    @ ./hue core:custom {
      #%graph.x 482
      #%graph.y 555
      .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
      .rate .1
      .time-offset 90
      .osc-type Triangle
    }
    @ ./multiply-1 core:math:multiply {
      #%graph.x 629
      #%graph.y 597
      .value 360
    }
    @ ./xform video:custom {
      #%graph.x 671
      #%graph.y 325
      .code "

    @In(1)
    PImage in;
    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_y;
    @P(3)
    @Type.Number(min = -180, max = 180, def = 0)
    double rotate;
    @P(4)
    @Type.Number(min = 0, max = 2, def = 1)
    double scale;

    @Override
    public void draw() \{
        double w2 = width / 2;
        double h2 = height / 2;
        translate(
                map(translate_x, 0, 1, -w2, width + w2),
                map(translate_y, 0, 1, -h2, height + h2)
        );
        rotate(radians(rotate));
        scale(scale);
        image(in, -w2, -h2);
    \}
"
      .scale 2
    }
    @ ./out-1 video:container:out {
      #%graph.x 1039
      #%graph.y 460
    }
    @ ./sprite core:container:in {
      #%graph.x 79
      #%graph.y 192
    }
    ~ ./backX!val ./background!scroll-x
    ~ ./backY!val ./background!scroll-y
    ~ ./hue!val ./multiply-1!in
    ~ ./multiply-1!out ./hsv!hue
    ~ ./background!out ./xform!in
    ~ ./xform!out ./hsv!in
    ~ ./hsv!out ./out-1!in
    ~ ./sprite!out ./background!background
  }
  @ ./random-1 core:array:random {
    #%graph.x 101
    #%graph.y 108
    .values [array "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.aseprite" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle02.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle03.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle04.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle05.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle06.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle07.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle08.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle09.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle10.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle11.png"]
  }
  @ ./random-2 core:array:random {
    #%graph.x 101
    #%graph.y 241
    .values [array "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.aseprite" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle02.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle03.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle04.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle05.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle06.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle07.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle08.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle09.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle10.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle11.png"]
  }
  @ ./timer-1 core:timing:timer {
    #%graph.x -67
    #%graph.y 187
  }
  @ ./custom-1 video:custom {
    #%graph.x 605
    #%graph.y 24
    .code "

    @Override
    public void setup() \{

    \}
    
    @Override
    public void draw() \{
        background((sin(millis() / 1000.0) + 1) * 127);
    \}
    
"
  }
  @ ./composite-2 video:composite {
    #%graph.x 865
    #%graph.y 92
    .mode BitXor
    .force-alpha true
  }
  @ ./cube video:gl:p3d {
    #%graph.x 529
    #%graph.y 337
    .code "

    @In(1) PImage tex;
    @Inject Property rotX, rotY, rotZ;
    @Inject Property s;
    @T(2) void scale() \{
        if(!s.isAnimating())
            s.set(100).to(30).in(0.5);

    \}
    @Override
    public void setup() \{
    \}

    @Override
    public void draw() \{
        camera(0, 0, -110, 0, 0, 0, 0, 1, 0);
        
        fill(255);
        //noStroke();
        
        if(!rotX.isAnimating())
            rotX.set(0).to(-TWO_PI).in(5);
        if(!rotY.isAnimating())
            rotY.set(0).to(-TWO_PI).in(8);
        
        beginShape(QUADS);
        
        if(tex != null) \{
            textureWrap(REPEAT);
            texture(tex);
        
            noStroke();

            scale(d(s));
            rotateX(d(rotX));
            rotateY(d(rotY));
            //front
            vertex(-1, 1, -1, 0, 0);
            vertex(-1, -1, -1, 0, tex.height);
            vertex(1, -1, -1, tex.width, tex.height);
            vertex(1, 1, -1, tex.width, 0);

            //back
            vertex(-1, 1, 1, 0, 0);
            vertex(-1, -1, 1, 0, tex.height);
            vertex(1, -1, 1, tex.width, tex.height);
            vertex(1, 1, 1, tex.width, 0);

            //left
            vertex(-1, 1, 1, 0, 0);
            vertex(-1, -1, 1, 0, tex.height);
            vertex(-1, -1, -1, tex.width, tex.height);
            vertex(-1, 1, -1, tex.width, 0);

            //right
            vertex(1, 1, -1, 0, 0);
            vertex(1, -1, -1, 0, tex.height);
            vertex(1, -1, 1, tex.width, tex.height);
            vertex(1, 1, 1, tex.width, 0);

            //bottom
            vertex(-1, -1, -1, 0, 0);
            vertex(-1, -1, 1, 0, tex.height);
            vertex(1, -1, 1, tex.width, tex.height);
            vertex(1, -1, -1, tex.width, 0);

            //top
            vertex(-1, 1, 1, 0, 0);
            vertex(-1, 1, -1, 0, tex.height);
            vertex(1, 1, -1, tex.width, tex.height);
            vertex(1, 1, 1, tex.width, 0);
        \}
        endShape();
    \}
"
  }
  @ ./still-1 video:still {
    #%graph.x 352
    #%graph.y 366
    .image [file "resources/Sprites/doodles/doodle11.png"]
  }
  @ ./random-3 core:array:random {
    #%graph.x 183
    #%graph.y 389
    .values [array "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.aseprite" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle01.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle02.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle03.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle04.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle05.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle06.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle07.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle08.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle09.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle10.png" "file:/C:/Projects/Personal/bitcrushed5/resources/Sprites/doodles/doodle11.png"]
  }
  @ ./timer-2 core:timing:timer {
    #%graph.x 2
    #%graph.y 425
    .period .1
  }
  @ ./composite-3 video:composite {
    #%graph.x 1083
    #%graph.y 142
    .mode Screen
    .force-alpha true
  }
  @ ./xfader-1 video:xfader {
    #%graph.x 1291
    #%graph.y 187
  }
  @ ./xform video:custom {
    #%graph.x 693
    #%graph.y 337
    .code "

    @In(1)
    PImage in;
    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double translate_y;
    @P(3)
    @Type.Number(min = -180, max = 180, def = 0)
    double rotate;
    @P(4)
    @Type.Number(min = 0, max = 2, def = 1)
    double scale;

    @Override
    public void draw() \{
        double w2 = width / 2;
        double h2 = height / 2;
        translate(
                map(translate_x, 0, 1, -w2, width + w2),
                map(translate_y, 0, 1, -h2, height + h2)
        );
        rotate(radians(rotate));
        scale(scale);
        image(in, -w2, -h2);
    \}
"
    .scale 0.8006612062454224
  }
  @ ./osc core:custom {
    #%graph.x 359
    #%graph.y 700
    .code "

    // Oscillation curve labels
    final String SIN = \"Sine\";
    final String COS = \"Cosine\";
    final String TAN = \"Tangent\";
    final String SQUARE = \"Square\";
    final String TRI = \"Triangle\";
    final String SAW = \"Saw\";
    
    @Out(1) Output val;
    
    @P(1) float rate;
    @P(2) float timeOffset;
    @P(3) @Type.String(allowed=\{SIN, COS, TAN, TRI\}) @Config.Port(false)
            String oscType;
    double value, time;
    
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        time = millis()/1000.0 + timeOffset;
        switch(oscType)
        \{
            case SIN:
                value = (sin(time * rate) + 1)/2;
                break;
            case COS:
                value = (cos(time * rate) + 1)/2;
                break;
            case TAN:
                value = (tan(time * rate) + 1)/2;
                break;
            case TRI:
                value = (time * rate) % 1.0;
        \}
        val.send(value);
    \}
    
"
    .rate 1
  }
  @ ./custom-2 core:custom {
    #%graph.x 565
    #%graph.y 604
    .code "

    @P(1) float val;
    @Out(1) Output out;
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        out.send((val + 1) * 0.8f);
    \}
    
"
    .val 8.264530915766954E-4
  }
  @ ./BgDoodle video:xfader {
    #%graph.x 433
    #%graph.y 37
    #%graph.minimized true
    .mix 0.426
  }
  @ ./FgDoodle video:xfader {
    #%graph.x 433
    #%graph.y 120
    #%graph.minimized true
    .mix 0.538
  }
  @ ./PulseFader video:xfader {
    #%graph.x 826
    #%graph.y 24
    #%graph.minimized true
    .mix 0.696
  }
  @ ./CubeFader video:xfader {
    #%graph.x 846
    #%graph.y 337
    #%graph.minimized true
    .mix 1.0
  }
  @ ./fftTrigger core:custom {
    #%graph.x 153
    #%graph.y 554
    .code "

    @Out(1) Output out;
    @P(0) float\[\] fftData;    
    @P(1) int channel;
    @P(2) float triggerVal;
    @Override
    public void init() \{

    \}

    
    @Override
    public void update() \{
        if(fftData.length > 0) \{
            if(fftData\[channel\] > triggerVal)
                out.send();
        \}
    \}
    
"
    .fft-data "rO0ABXVyAAJbRgucgYki4AxCAgAAeHAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
    .channel 4
    .trigger-val 1.1700000000000002
  }
  ~ ./random-1!out ./BG01!sprite
  ~ ./random-2!out ./BG02!sprite
  ~ ./timer-1!out ./random-1!trigger
  ~ ./timer-1!out ./random-2!trigger
  ~ ./composite-1!out ./composite-2!src
  ~ ./still-1!out ./cube!tex
  ~ ./timer-2!out ./random-3!trigger
  ~ ./random-3!out ./still-1!image
  ~ ./composite-2!out ./composite-3!in
  ~ ./xfader-1!out ./screen!in
  ~ ./composite-3!out ./xfader-1!in-1
  ~ ./cube!out ./xform!in
  ~ ./osc!val ./custom-2!val
  ~ ./custom-2!out ./xform!scale
  ~ ./BG01!out-1 ./BgDoodle!in-2
  ~ ./BgDoodle!out ./composite-1!src
  ~ ./BG02!out-1 ./FgDoodle!in-2
  ~ ./FgDoodle!out ./composite-1!in
  ~ ./custom-1!out ./PulseFader!in-2
  ~ ./PulseFader!out ./composite-2!in
  ~ ./xform!out ./CubeFader!in-2
  ~ ./CubeFader!out ./composite-3!src
  ~ ./fftTrigger!out ./cube!scale
}
